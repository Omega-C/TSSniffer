import socket, requests, subprocess

__author__="""youtube channel: https://www.youtube.com/channel/UCMADIRDf7d8pVG719yn1t4A,
Initials: S.R.
Github Name: Omega-C
22/02/2020-29/02/2020 (I procrastonated a bit)
version 1.03"""

__annotations__="""hey, please dont try and pass this off as your own, I added a fair use licence in the github. If this is an old program, the links may not be valid or may be re-used.

must install tshark

Documentation:
https://www.wireshark.org/docs/man-pages/tshark.html
(read it if you haven't, it helps belive it or not)

Note:
im just a teen programmer, dont expect anything great, I just did this in my off time from scratch to make things more interfacable (kinda like my email module, gotta make my github more organised).
prot1:copy and paste from *person*
prot2:cant find out how to do it
prot3:possible new feature
prot4:regular note
prot5:debugging
"""

class tcommand:
	"""a class for holding commands and parsing for the command, you can also use the json of -T ek and -T json to get more info (ek works well). Not reccomended for feilds, pdml, or psml because it will not show extra data"""
	def __init__(self,data,error_show=True):
		if str(type(data))=="<class 'bytes'>":
			data=data.decode("utf8")
		self.raw=data
		self.decoded_response=None
		try:
			if data.replace(" ","")[0]=="{" and data.replace(" ","")[-1]=="}":
				self.raw=self.jsonify(data)
				#print(self.json)#prot5
				self.decoded_response=self._parse_tshark_output_json(self.raw)
			elif data.replace(" ","")[0]!="<":
				self.decoded_response=self._parse_tshark_output_normal(self.raw)
		except Exception as e:
			if error_show:
				raise(e)

	def __getitem__(self,item):
		if self.decoded_response!=None:
			return(self.decoded_response[item])
		else:
			return(None)

	def jsonify(self,data):
		changes={"false":"False","true":"True","null":"None"}
		for json_form in list(changes):
			data=data.replace(json_form,changes[json_form])
		return(eval(data))

	def _parse_tshark_output_json(self,command):
		try:
			cmd={}
			cmd["no"]=command["layers"]["frame"]["frame_frame_number"]
			cmd["time"]=command["layers"]["frame"]["frame_frame_time"]
			cmd["source"]=command["layers"]["ip"]["ip_ip_src"]
			cmd["destination"]=command["layers"]["ip"]["ip_ip_dst"]
			cmd["protocol"]=None#prot2 cant find the structure
			cmd["length"]=command["layers"]["frame"]["frame_frame_len"]
			cmd["info"]=None#prot2 cant find structure
			return(cmd)
		except KeyError:
			raise(TypeError("thats not the expected data structure, sorry."))


	def _parse_tshark_output_normal(self,command):
		try:
			replaceable={"\n":"","\t":"","\r":""}
			o_command=command
			for rep_v in replaceable:
				command=command.replace(rep_v,replaceable[rep_v])
			command=command.split(" ")
			while "" in command:
				command.remove("")
			if len(command)<7:
				return({"raw":o_command,"source":""})
			cmd={}
			cmd["no"]=command[0]
			cmd["time"]=command[1]
			cmd["source"]=command[2]
			cmd["destination"]=command[4]
			cmd["protocol"]=command[5]
			cmd["length"]=command[6]
			cmd["info"]=" ".join(command[7:])
			return(cmd)
		except KeyError:
			raise(TypeError("thats not the expected data structure, sorry."))

	#prot4 add to the parser object
	def get_location(self,ip_kw="source"):
		jdata=self.decoded_response
		ip=jdata[ip_kw]
		url="https://ipinfo.io/{}/json".format(str(ip))
		data={}
		if len(ip.split("."))==4:
			data=dict(requests.get(url,headers={"User-agent":"Chrome"}).json())
			data["more_accurate_link"]="https://whatismyipaddress.com/ip/"+ip
		return(data)

class command_terminal:
	"""a simple shell for a shell that uses Popen"""
	def __init__(self,command):
		self.command=command
		self.process=None

	def _create_command(self,variables):
		end_command=self.command
		for var_name in variables.keys():
			end_command+=" "+var_name
			if variables[var_name]!="":
				end_command+=variables[var_name]
		return(end_command)

	def start_process(self,variables,shell_bool=True):
		if self.process!=None:
			raise(TypeError("Process type is not 'None' as expected."))
		cmd_command=self._create_command(variables)
		self.process=subprocess.Popen(cmd_command,shell=shell_bool,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
		return(None)

	def read_process(self):
		if str(type(self.process))!="<class 'subprocess.Popen'>":
			raise(TypeError("Process type is not 'subprocess.Popen' as expected."))
		return(iter(self.process.stdout.readline,b""))

	def kill_process(self):
		if str(type(self.process))!="<class 'subprocess.Popen'>":
			raise(TypeError("Process type is not 'subprocess.Popen' as expected."))
		self.process.kill()
		self.process=None
		return(None)

class tshark_runner(command_terminal):
	"""the shell for the shell for the shell that can run commands"""
	def __init__(self,*args,**kwargs):
		command_terminal.__init__(self,*args,**kwargs)
		self.computer_network_ip=self._computer_ip()

	def _computer_ip(self,connection_address=("8.8.8.8",80)):
		sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
		sock.connect(connection_address)
		name=sock.getsockname()[0]
		sock.close()
		return(name)

	def raw_execute(self,variables={},json=False):
		self.start_process(variables)
		for line in self.read_process():
			if json:
				yield(self._parse_tshark_output(line))
			else:
				yield(line.decode("utf8"))
		self.kill_process()

	#gotta remove this, people can do this themself
	def identify_networks(self):
		return(self.raw_execute(variables={"-D":""}))

	def run_function_as_self(self,function):
		def runner(*args,**kwargs):
			return(function(self,*args,**kwargs))
		return runner

#example script
def _example():
	trunner=tshark_runner(r'"C:\Program Files\Wireshark\tshark.exe"')

	@trunner.run_function_as_self
	def ipl_run(self,variables={},protocols=[]):
		self.start_process(variables)
		known=[self.computer_network_ip]
		try:
			for line in self.read_process():
				command=tcommand(line)
				if command["source"] not in known:
					known+=[command["source"]]
					yield(command.get_location())
		except KeyboardInterrupt:
			self.kill_process()
			print("killed process")
		return(None)

	generator=ipl_run(variables={"-i":"Wi-Fi"})

	for value in generator:
		print(value)

if __name__=="__main__":
	print("executing example")
	_example()